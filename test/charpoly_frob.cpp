// Copyright 2018 Edgar Costa
// See LICENSE file for license details.

#include "hypersurface.h"

int main()
{
    Vec<ZZ> zeta, zeta_expected;
    Mat<ZZ> F;
    Vec<int64_t> charpoly_prec;

    const char input[] = "[[3139086 5594704 1078631 6279759 336444 2334477 5522760 4267443 2400602 3464421 1981634 3963268 12696 5554500 3437442 3654332 4629279 4572147 5864494 1324087 5787789 93725] [129882725 3134325 1626146 341205 2742336 5585182 6168140 5430185 3412579 3271336 6327369 5215940 2678327 4179100 622633 3179290 4091286 351256 2779366 5174149 5269369 17664] [147695213 2026599 1754693 5959185 6115769 3889208 5198483 2973509 1570601 2750800 2805287 4282255 4623460 3966971 794558 497260 4978419 2231851 5929561 4539349 1213526 203987] [23749984 3127977 473455 5914749 3166065 2856600 3352802 3458073 6354348 3700884 2293744 4857807 3034344 5708968 5580950 516304 978650 5577247 726846 4336213 5702620 71461] [70495598 4055843 4252102 439070 2807403 2124464 205781 2844962 5603697 1381748 1594406 2950762 703570 1767389 1051652 1864725 3198863 4585372 1310862 5830638 2665102 17779] [62136869 6177662 4700165 6219453 401511 1624030 3957449 2812164 4424027 6023194 2231322 445947 2392667 3160246 3435326 4354728 2941769 2183712 6229504 4220891 6208873 33718] [144531793 5032906 4963607 3503038 3155485 5746527 5220172 2610086 5174678 5072581 4326162 2608499 1309804 2980386 5080516 3445906 5419076 1664763 5053537 3775473 2888340 62882] [101107770 5903640 6039064 5624328 4801204 1836159 6102015 765463 3629469 3850062 2558244 1243679 2285809 316871 4789037 4771051 1179141 3509915 1924502 6068688 5455048 143773] [10938133 1629320 2944414 4433020 3329526 5611632 2799468 5950721 805138 4360547 3230603 833704 3783408 4105569 5998331 203136 2004381 4967310 4828712 3997124 3234306 121348] [104246856 6086145 1552086 5314863 73531 6135342 6407248 4381707 1961532 6402487 4076474 6025310 949026 1365349 2204872 320045 2421233 6102544 1398147 3916187 3119513 142370] [123409881 4041031 1660531 3029583 2627014 6270237 273493 2222858 3342751 3719399 99981 5202715 1753635 651728 535348 5232868 1054297 588777 4339387 4219304 249159 64216] [117922564 5743882 5824819 1426184 5467744 3948456 5069407 2357753 2239257 3377665 2783598 5939083 4477456 4662077 1961532 101039 430606 2791533 311052 2335006 546986 221858] [36647004 1445228 3050743 6318376 6237439 6296158 3147021 5023913 711505 4096047 3600374 5664003 2447683 6417828 2378913 3951101 3574982 1345776 2233967 5638082 5130242 17342] [57428240 1697561 5821645 5267253 662308 5133416 973360 6397197 5110669 5222817 3700884 29624 50255 704628 3299373 2002265 6173430 4964665 664424 1851500 261326 236785] [104611866 6031658 1480142 6050173 5194251 5707910 1250027 626336 2723821 2774605 1157452 1414546 2713241 2513279 3331113 5764513 5246093 1767918 5485201 5292116 4674244 264155] [89500452 4838234 4543052 5759223 1703909 4029922 5009101 4906475 3737385 5202715 2934892 847458 4878438 4123555 340147 6070275 3357563 4868387 1138408 6274469 1684865 186323] [64472933 4046321 829472 3812503 2883050 2987263 151294 5059356 5073110 5430185 3850591 2695255 5779325 3026409 1835630 639032 4724499 5619038 121670 607821 570791 152743] [83064109 4249457 3659093 1047420 5338139 1857848 1262723 3406760 2541845 1052181 2326013 1223577 2240844 5011217 1681691 3605135 4200260 4424556 2898920 4820248 4132548 260958] [116061013 5898879 2768786 4661019 4293364 3359150 3586091 4900127 6234794 2714299 5664003 2392667 3820967 1351066 2353521 5026029 1114074 3349628 4508138 3898201 5455577 60444] [34542113 1836159 2527562 5200070 447005 5503187 1578536 2234496 3752197 337502 2999430 989230 2013374 2927486 290950 2281577 2550309 1545738 5249796 1301340 5839102 184460] [107531946 3041221 2203285 6358580 2456147 3450667 2821686 1995917 1978989 3257053 1953597 1986395 2600564 6051760 4515544 4568444 6330543 391460 1663176 802493 5984048 248032] [100122243 438012 256036 2744452 5766629 207897 5550268 5075755 3656448 2609028 1956242 3642165 6361225 5196367 2709009 104742 5669822 436425 3452254 4392287 609937 257117] ]";

    stringstream buffer;
    buffer << input;
    buffer >> F;
const char charpoly_prec_str[] = "[47 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 3]";
    buffer << charpoly_prec_str;
    buffer >> charpoly_prec;
    const char zeta_expected_str[] = "[-824185149135487077883465900577270766354751717380230010246241 1625745342257885252667311713146584892949292448189818381352 -3073242612963866262131024032413203956425883644971301288 8230170828668198874641998826563400639451799301277902 -6863814212722283060137328055067886666950794480105 8650049417419386339177477070028842680467289830 -4905510066589444048682879245763048779092981 -24728469144748300182396366708320346712504 29216055227727197758029733823629899235 0 83521871999391648137420131642268 0 -298461883710362842247633948 0 -1333176177321956228035 4032290895491739064 2858429273741781 -18011526614630 51072381705 -218835662 292008 -552 1]";
    buffer << zeta_expected_str;
    buffer >> zeta_expected;

    charpoly_frob(zeta, F, charpoly_prec, 4, 23, 1);
    if(zeta_expected == zeta)
    {
        std::cout << "charpoly_frob sign test: PASS\n";
    }
    else {
        std::cout << "charpoly_frob sign test: FAIL\n";
        print(zeta);
        print(zeta_expected);
        assert(false);
    }


    return 0;
}

